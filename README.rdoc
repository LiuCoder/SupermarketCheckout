== Welcome to SupermarketCheckout

I've attempted to develop a simple supermarket application using Ruby on Rails.

Rails is a web-application framework that includes everything needed to create
database-backed web applications according to the Model-View-Control pattern.


== Getting Started

1. At the command prompt, clone this repository:
       <tt>git clone https://github.com/WillJThomas/SupermarketCheckout.git</tt>

2. Change directory to <tt>SupermarketCheckout</tt> and use rake to setup your database:
        <tt>cd SupermarketCheckout; rake db:setup</tt>

3. From the same directory, start the web server:
       <tt>rails server</tt> (run with --help for options)

3. Go to http://localhost:3000/ and you'll see the supermarket home page.


== NOTE: Some features may be partially developed

The application is currently under development, and as such some features may not be complete.
To get a clear understanding of what features are/are not complete, follow these steps:

1. Change directory to the application's base directory (<tt>SupermarketCheckout</tt>).

2. Run all the behavioural tests:
          <tt>rake cucumber</tt>

3. Each test corresponds to an application feature. If a test passes, it's fair to assume the feature is complete.
   If feature is only partially complete, you might see a message like this:
         <tt>1 scenario (1 pending)
             3 steps (1 skipped, 1 pending, 1 passed)</tt>

   In this example, the feature's test has three steps (given, when, then) and only one has been implemented so far.
   The rest of the functionality to complete this feature is pending.

== Extending the application

If you wish to extend the application. You may find the following resources handy:

* The Getting Started Guide: http://guides.rubyonrails.org/getting_started.html
* Ruby on Rails Tutorial Book: http://www.railstutorial.org/
* BDD with Cucumber and Rails: https://github.com/cucumber/cucumber/wiki/Cucumber-Backgrounder

== Description of Contents

The core directory structure of the application (only non-standard or interesting sub-directories are shown):

  |-- app
  |-- config
  |-- db
  |-- doc
  |-- features
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |-- spec
  |-- script
  |-- test
  |-- vendor


app
  Holds all the code that's specific to this particular application.
  It follow the Rails project default structure, including models, views, controllers etc.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.
  seeds.rb contains initial data loaded into database when setting up the application.

doc
  Extra documentation for the application, explaining the core API in more detail.

features
  The behavioural tests, which were used to drive the development (BDD).
  Cucumber was used to write these tests.

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers in the main app directory.
  This directory is in the load path.

lib/tasks
   Custom rake tasks used by some of the external gems in the application e.g. cucumber.

public
  The directory available for the web server.

script
  Helper scripts for automation and generation
  e.g. cucumber scripts for generating new behavioural tests.

spec
  All the unit and integration tests written using RSpec.

test
  Unit and functional tests along with fixtures.

vendor
  External libraries that the application depends on. This directory is in the load path.
